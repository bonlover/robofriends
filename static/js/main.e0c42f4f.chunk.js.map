{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","borderRadius","marginTop","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAkBeA,EAhBF,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE7B,OACC,yBAAKC,UAAU,uDAEd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UAEpD,6BACC,gCAAML,GACN,+BAAKC,MCsBMK,EA9BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMlB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAEjB,OAEC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAOO,EAAOG,GAAGV,KACjBC,MAAOM,EAAOG,GAAGT,aCNTW,EAZG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,yCACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,MCKCI,EAZA,SAACC,GAEf,OAEC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAASC,aAAc,OAAQC,UAAW,SAE7GN,EAAMO,WCmBIC,E,kDAvBd,WAAYR,GAAQ,IAAD,8BAElB,cAAMA,IAEDS,MAAQ,CAEZC,UAAU,GANO,E,8DAUDC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,2DAGDG,KAAKb,MAAMO,a,GArBQQ,aC+DbC,G,wDAlDd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAAEpB,YAAawB,EAAMC,OAAOC,SAd1C,EAAKX,MAAQ,CACZrB,OAAQ,GACRM,YAAa,IAJD,E,gEAQO,IAAD,OACnB2B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAC1B,OAAQqC,S,+BAS9B,IAAD,EAEwBZ,KAAKJ,MAA7BrB,EAFA,EAEAA,OAAQM,EAFR,EAEQA,YAEVgC,EAAetC,EAAOuC,QAAO,SAAAC,GAClC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAGtD,OAAQzC,EAAO2C,OAMd,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,gBAAd,iBACA,kBAAC,EAAD,CAAWW,aAAckB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU7B,OAASsC,OATrB,uBAAG1C,UAAU,kBAAb,qB,GAhCc+B,cCDEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.e0c42f4f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ( { name, email, id }) => {\n\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"> \n\n\t\t\t<img src={`https://robohash.org/${id}?100x100`} alt=\"robot\"/>\n\n\t\t\t<div>\n\t\t\t\t<h2> {name}</h2>\n\t\t\t\t<p> {email}</p>\n\t\t\t</div>\t\n\t\t</div>\n\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n\t // if(true) {\n\t // \tthrow new Error('Noooops!');\n\t // }\n\n\treturn (\n\t\t<div>\n\t\t\t{ \n\t\t\t\trobots.map((user, i) => {\n\n\t\t\t\t\treturn (\n\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname ={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t);\n\n\t\t\t\t}) \n\n\t\t\t}\n\t\t</div>\n\t);\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\t\n\t\t\t\tclassName='pa3 ba b--green bg-light-blue shadow-1'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search Robot' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n\treturn (\n\n\t\t<div style={{ overflowY: 'scroll', border: '2px solid white', height: '100vh', borderRadius: '20px', marginTop: '20px'}} >\n\n\t\t\t{ props.children }\n\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\n\tconstructor(props) {\n\n\t\tsuper(props);\n\n\t\tthis.state = {\n\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h2> Oooops. That is not good. </h2>\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n\n// const state = {\n// \trobots: robots,\n// \tsearchfield: ''\n// }\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({robots: users}));\n\t}\n\n\tonSearchChange = (event) => {\n\n\t\tthis.setState({ searchfield: event.target.value })\n\t\t\n\t}\n\n\trender() {\n\n\t\tconst { robots, searchfield } = this.state;\n\n\t\tconst filterRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\n\t\treturn !robots.length ? \n\n\t\t\t\t<p className=\"pa5 ma6 tc red\"> Loading ... </p> :\n\t\t\n\n\t\t(\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1 lh-title \"> RoboFriends </h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots= {filterRobots}/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\n\t\t\n\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App/>\n \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n "],"sourceRoot":""}